
			ALSA library installation
			=========================

Installation from tarbal
------------------------

For installation you can use these commands:

	./configure
	make install


Compilation from CVS sources
----------------------------

You need also GNU packages automake and libtool installed in your system
to compile CVS sources of alsa-lib package.

For compilation you can use these commands:

	libtoolize --force --copy --automake
	aclocal
	autoheader
	automake --foreign --copy --add-missing
	autoconf
	./configure
	make

The included cvscompile script does this job for you.

Note: Some automake packages have missing aclocal program. Use newer version
      in the case.


Compilation of static library
-----------------------------

If you would like to use the static ALSA library, you need to use these
options for the configure script:

	./configure --enable-shared=no --enable-static=yes

Unfortunately, due to bug in the libtool script, the shared and static
library cannot be built together.

Configuration for cross-compilation
-----------------------------------

When you would like to cross-compile ALSA library (e.g. compile on
i686 host but for arm architecture) you will need to call ./configure
script with aditional parameters:

CC=arm-linux-gcc ./configure --target=arm-linux

In this example host where the library is build is guessed (should be
given with --host=platform) and target for which is the library build is
Linux on ARM architecture.  You should ommit setting 'CC' variable and
cross-compiler will be guessed too.

So simplest version would be:

./configure --target=arm-linux

For platform names in the form cpu-vendor-os (or aliases for this)
you should look in 'config.guess' script. Target and all paths
used here are only examples and should not be directly applicable to
your system.

Configuration for machines without FPU
--------------------------------------

If your machine does not have FP unit, you should use '--with-softfloat'
option. This option disables usage of float numbers in PCM route plugin.
ALSA could then leave much more CPU cycles for your applications, but you 
could still need some floating point emulator.

Jack plugin
-----------

To build the jack pcm plugin, use this sequence:

cd alsa-lib/src/pcm/ext
make jack
make jack-install

The default directory for add-on modules is ${prefix}/lib/alsa-lib.
