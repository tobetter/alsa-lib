Index: alsa-lib-1.0.15/src/pcm/pcm_ioplug.c
===================================================================
--- alsa-lib-1.0.15.orig/src/pcm/pcm_ioplug.c	2008-03-11 18:22:04.000000000 -0400
+++ alsa-lib-1.0.15/src/pcm/pcm_ioplug.c	2008-03-11 18:25:07.000000000 -0400
@@ -313,7 +313,7 @@
 		if (err < 0)
 			return err;
 		change2 |= err;
-		/* periods = buffer_bytes / periods */
+		/* periods = buffer_bytes / period_bytes */
 		err = rule_div(params, SND_PCM_HW_PARAM_PERIODS,
 			       SND_PCM_HW_PARAM_BUFFER_BYTES,
 			       SND_PCM_HW_PARAM_PERIOD_BYTES);
@@ -344,6 +344,26 @@
 			return err;
 	}
 
+	/* period_bytes = buffer_bytes / periods */
+	err = rule_div(params, SND_PCM_HW_PARAM_PERIOD_BYTES,
+		       SND_PCM_HW_PARAM_BUFFER_BYTES,
+		       SND_PCM_HW_PARAM_PERIODS);
+	if (err < 0)
+		return err;
+	if (err) {
+		/* update period_size and period_time */
+		change |= err;
+		err = snd_ext_parm_interval_refine(hw_param_interval(params, SND_PCM_HW_PARAM_PERIOD_BYTES),
+						   io->params, SND_PCM_IOPLUG_HW_PERIOD_BYTES);
+		if (err < 0)
+			return err;
+		err = refine_back_time_and_size(params, SND_PCM_HW_PARAM_PERIOD_TIME,
+						SND_PCM_HW_PARAM_PERIOD_SIZE,
+						SND_PCM_HW_PARAM_PERIOD_BYTES);
+		if (err < 0)
+			return err;
+	}
+
 	params->info = SND_PCM_INFO_BLOCK_TRANSFER;
 	p = &io->params[SND_PCM_IOPLUG_HW_ACCESS];
 	if (p->active) {
@@ -469,7 +489,7 @@
 {
 	ioplug_priv_t *io = pcm->private_data;
 	static snd_pcm_state_t states[2] = {
-		SND_PCM_STATE_PAUSED, SND_PCM_STATE_RUNNING
+		SND_PCM_STATE_RUNNING, SND_PCM_STATE_PAUSED
 	};
 	int prev, err;
 
